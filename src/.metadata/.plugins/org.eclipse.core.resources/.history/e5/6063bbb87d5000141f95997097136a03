«IMPORT alica»  

«DEFINE Root FOR Plan»
	«FILE name + id + ".h"-»
		#ifndef «name»_H_
		#define «name»_H_

		#include "engine/BasicCondition.h"
		#include "engine/BasicUtilityFunction.h"
		#include "engine/UtilityFunction.h"
		#include "engine/DefaultUtilityFunction.h"

		using namespace alica;
		
		namespace alicaAutogenerated
		{
			class UtilityFunction«id» : public BasicUtilityFunction
			{
				shared_ptr<UtilityFunction> getUtilityFunction(Plan* plan);
			};
			«FOREACH conditions AS con»
				«IF (con.metaType == alica::PreCondition)»
					class PreCondition«con.id» : public BasicCondition
					{
						bool evaluate(shared_ptr<RunningPlan> rp);
					};
				«ELSE»
					class RunTimeCondition«con.id» : public BasicCondition
					{
						bool evaluate(shared_ptr<RunningPlan> rp);
					};
				«ENDIF»
			«ENDFOREACH»
			«FOREACH states AS s»
				«FOREACH s.outTransitions AS transition»
					class TransitionCondition«transition.id» : public BasicCondition
					{
						bool evaluate(shared_ptr<RunningPlan> rp);
					};
				«ENDFOREACH»
			«ENDFOREACH»
		} /* namespace alica */

		#endif
		
		«FOREACH states AS state»
			«FOREACH state.plans.typeSelect(BehaviourConfiguration) AS beh»
				«EXPAND BehaviourConfiguration FOREACH state.plans.typeSelect(BehaviourConfiguration)»
			«ENDFOREACH»
		«ENDFOREACH»
	«ENDFILE»
«ENDDEFINE»
«DEFINE Behaviour FOR Behaviour»
	«FILE name +".h"-»
		#ifndef «name»_H_
		#define «name»_H_

		namespace alica
		{
			class AttackOpp : public BasicBehaviour
			{
				public:
					«name»();
					virtual ~«name»();
					virtual void run(void* msg);
				protected:
					int callCounter;
					virtual void initialiseParameters();
			};
		} /* namespace alica */

		#endif /* «name»_H_ */
	«ENDFILE»

«ENDDEFINE»