«IMPORT alica»  

«DEFINE Root FOR Plan»«ENDDEFINE»
«DEFINE Root FOR ConstraintCreator»
	«FILE "ConstraintCreator" + ".h"-»
		#ifndef CONSTRAINTCREATOR_H_
		#define CONSTRAINTCREATOR_H_

		#include <engine/IConstraintCreator.h>

		namespace alica
		{

			class TestConstraintCreator : public IConstraintCreator
			{
				public:
				ConstraintCreator();
				virtual ~ConstraintCreator();
				shared_ptr<BasicConstraint> createConstraint(long constraintConfId);
			};

		} /* namespace alica */
			«FOREACH plans AS p»
				«IF (p.metaType == alica::Plan)»
					«EXPAND AbstractPlan FOR p»
				«ENDIF»	
			«ENDFOREACH»
#endif /* CONSTRAINTCREATOR_H_ */
	«ENDFILE»
«ENDDEFINE»
«DEFINE AbstractPlan FOR AbstractPlan»
	«FILE name + id + "Constraint.h"-»
		#ifndef «name»CONSTRAINT_H_
		#define «name»_H_
		#include "engine/BasicConstraint.h"
		#include <memory>
		
		using namespace std;
		using namespace alica;
		
		namespace alica
		{
			class ConstraintDescriptor;
			class RunningPlan;
		}
		
		namespace alicaAutogenerated
		{
			«FOREACH conditions AS c»
				«IF (c.metaType == alica::RuntimeCondition)»
					class Constraint«c.id» : public BasicConstraint
					{
					void getConstraint(shared_ptr<ConstraintDescriptor> c, shared_ptr<RunningPlan>);
					};
				«ENDIF»
			«ENDFOREACH»
		} /* namespace alica */

		#endif /* «name»CONSTRAINT_H_ */
	«ENDFILE»
«ENDDEFINE»








