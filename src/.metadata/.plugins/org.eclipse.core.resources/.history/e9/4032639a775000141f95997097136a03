«IMPORT alica»  
«DEFINE Root FOR PlanningProblem»«ENDDEFINE»
«DEFINE Root FOR Plan»

	«FILE name + id + "Constraints.cpp"»
	
		#include «name»«id».h
		using namespace std;
		using namespace alica;
		«PROTECT CSTART '/*' CEND '*/' ID "ch"+this.id »
			//Add additional using directives here
		«ENDPROTECT»
		
		
		namespace alicaAutogenerated
		{
			//Plan:«this.name»
			«EXPAND description»
			«EXPAND abstractPlanChecking»
			«EXPAND doExpandStates»			
		}
	«ENDFILE»

«ENDDEFINE»
«DEFINE BehaviourConfiguration FOR BehaviourConfiguration»
«FILE behaviour.name + id + "BehaviourConstraints.cpp"»
		using System;
		using System.Collections.Generic;
		using Alica;
		using AD = AutoDiff;
		
		«PROTECT CSTART '/*' CEND '*/' ID "ch"+this.id »
			//Add additional using directives here
		«ENDPROTECT»
		
		namespace Alica.Validators {	
			public partial class ConstraintFunctions{ //«this.id» {

			//BehaviourConfiguration: «this.name» «this.id»
			«EXPAND abstractPlanChecking»
			}
		}				
«ENDFILE»
«ENDDEFINE»

«DEFINE description FOR Plan»
/*		
* Tasks: «FOREACH entryPoints AS planEntryPoint»
* - EP:«planEntryPoint.id» : «planEntryPoint.task.name» («planEntryPoint.task.id»)«ENDFOREACH»
*
* States:«FOREACH states AS state»
* - «state.name» («state.id»)«ENDFOREACH»
*
* Vars:«FOREACH vars AS var»				
* - «var.name» («var.id») «ENDFOREACH»
*/
«ENDDEFINE»


«DEFINE stateCheckingMethods(State s) FOR Plan»
		//Generation not implemented
		«REM»Implementation by aspects of Conditionplugins«ENDREM»
«ENDDEFINE»

«DEFINE doExpandStates FOR Plan»
	«FOREACH states AS state»
		«EXPAND stateCheckingMethods(state)»
		«EXPAND BehaviourConfiguration FOREACH state.plans.typeSelect(BehaviourConfiguration)»
	«ENDFOREACH»
«ENDDEFINE»

«DEFINE planCheckingMethods FOR AbstractPlan»
		//Generation not implemented
		«REM»Implementation by aspects of Conditionplugins«ENDREM»
«ENDDEFINE»

«DEFINE abstractPlanChecking FOR AbstractPlan»			
		«EXPAND planCheckingMethods»	
«ENDDEFINE»
