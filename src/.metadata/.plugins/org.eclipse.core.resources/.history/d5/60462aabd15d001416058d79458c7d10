«IMPORT alica»  
«DEFINE Root FOR Plan»
	«FILE name + id + "Constraints.h"-»
		#ifndef «name»CONSTRAINT_H_
		#define «name»_H_
		#include "engine/BasicConstraint.h"
		#include <memory>
		
		using namespace std;
		using namespace alica;
		
		namespace alica
		{
			class ConstraintDescriptor;
			class RunningPlan;
		}
		
		namespace alicaAutogenerated
		{
				
				«FOREACH conditions AS con»
						«IF (con.metaType == alica::PreCondition)»
							«IF (con.abstractPlan == null)»
							«IF (c.vars.size > 0) || (c.quantifiers.size > 0)»
							
								class Constraint«con.id» : public BasicConstraint
								{
									void getConstraint(shared_ptr<ConstraintDescriptor> c, shared_ptr<RunningPlan>);
								};
							«ELSE»
								class Constraint«con.id» : public BasicConstraint
								{
									void getConstraint(shared_ptr<ConstraintDescriptor> c, shared_ptr<RunningPlan>);
								};
							«ENDIF»
						«ENDIF»
						«IF (con.metaType == alica::RuntimeCondition)»
							class Constraint«con.id» : public BasicConstraint
							{
								void getConstraint(shared_ptr<ConstraintDescriptor> c, shared_ptr<RunningPlan>);
							};
						«ENDIF»
				«ENDFOREACH»
					«FOREACH transitions AS con»
					«IF (con.preCondition.metaType == alica::PreCondition)»
					class Constraint«con.preCondition.id» : public BasicConstraint
					{
						void getConstraint(shared_ptr<ConstraintDescriptor> c, shared_ptr<RunningPlan>);
					};
					«ENDIF»
					«ENDFOREACH»
		} /* namespace alica */

		#endif /* «name»CONSTRAINT_H_ */
	«ENDFILE»
«ENDDEFINE»
«DEFINE Root FOR PlanningProblem»«ENDDEFINE»