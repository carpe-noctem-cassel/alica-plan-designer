«IMPORT alica»  
«AROUND de::uni_kassel::vs::cn::planDesigner::codegeneration::templates::ExpressionsCPlusPlus::stateCheckingMethods(State s) FOR Plan»
«FOREACH s.outTransitions AS transition»
«IF (transition.preCondition.pluginName == "DefaultPlugin")»
			/*
			*		
			* Transition:
			*   - Name: «transition.preCondition.name», ConditionString: «transition.preCondition.conditionString», Comment : «transition.comment» 
			*
			* Plans in State: «FOREACH s.plans AS plan»				
			*   - Plan - (Name): «plan.name», (PlanID): «plan.id» «ENDFOREACH»
			*
			* Tasks: «FOREACH s.inPlan.entryPoints AS planEntryPoint»
			*   - «planEntryPoint.task.name» («planEntryPoint.task.id») (Entrypoint: «planEntryPoint.id»)«ENDFOREACH»
			*
			* States:«FOREACH s.inPlan.states AS state»
			*   - «state.name» («state.id»)«ENDFOREACH»
			*
			* Vars:«FOREACH transition.preCondition.vars AS var»				
			*	- «var.name» («var.id») «ENDFOREACH»
			*/
			bool TransitionCondition«transition.preCondition.id»::evaluate(shared_ptr<RunningPlan> rp)
			 {	
				«PROTECT CSTART '/*' CEND '*/' ID transition.id »
					return false;
				«ENDPROTECT»	
				
			}
«ENDIF»
	«ENDFOREACH»
«ENDAROUND»

«AROUND de::uni_kassel::vs::cn::planDesigner::codegeneration::templates::ExpressionsCPlusPlus::planCheckingMethods FOR AbstractPlan»
«FOREACH this.conditions.typeSelect(RuntimeCondition) AS rc»
	«IF (rc.pluginName == "DefaultPlugin")»
			  //Check of RuntimeCondition - (Name): «rc.name», (ConditionString): «rc.conditionString», (Comment) : «rc.comment» 

			  /* 
			  * Available Vars:«FOREACH rc.vars AS var»
			  *	- «var.name» («var.id»)«ENDFOREACH»
			  */
			 bool RunTimeCondition«rc.id»::evaluate(shared_ptr<RunningPlan> rp)
			 {
			 	 «PROTECT CSTART '/*' CEND '*/' ID rc.id »
			 	  return true;
				 «ENDPROTECT»			    
			  }		
	«ENDIF»		
	«ENDFOREACH»
	«FOREACH this.conditions.typeSelect(PreCondition) AS pc»
	«IF (pc.pluginName == "DefaultPlugin")»
			  //Check of PreCondition - (Name): «pc.name», (ConditionString): «pc.conditionString» , (Comment) : «pc.comment» 

			  /*
			  * Available Vars:«FOREACH pc.vars AS var»
			  *	- «var.name» («var.id»)«ENDFOREACH»
			  */
			 bool PreCondition«pc.id»::evaluate(shared_ptr<RunningPlan> rp)
			{
			 	 «PROTECT CSTART '/*' CEND '*/' ID pc.id »
			 	 	//--> "PreCondition:«pc.id»  not implemented";
					return true;
				 «ENDPROTECT»			    
			  }
	«ENDIF»				
	«ENDFOREACH»
«ENDAROUND»

«AROUND de::uni_kassel::vs::cn::planDesigner::codegeneration::templates::ConstraintsCPlusPlus::stateCheckingMethods(State s) FOR Plan»
// State: «s.name»
«FOREACH s.outTransitions AS transition»
«IF (transition.preCondition.pluginName == "DefaultPlugin")»
«IF transition.preCondition.id > 0»
«IF (transition.preCondition.vars.size > 0) || (transition.preCondition.quantifiers.size > 0)»
/*		
* Transition: 
* - Name: «transition.preCondition.name»
* - ConditionString: «transition.preCondition.conditionString»
*
* Plans in State: «FOREACH s.plans AS plan»				
* - Plan - (Name): «plan.name», (PlanID): «plan.id» «ENDFOREACH»
* Static Variables: «transition.preCondition.vars.name»
* Domain Variables:
«FOREACH transition.preCondition.quantifiers AS q»
* forall agents in «q.scope.name» let v = «q.sorts» 
«ENDFOREACH»
*/
void Constraint«transition.preCondition.id»::getConstraint(shared_ptr<ConstraintDescriptor> c, shared_ptr<RunningPlan> rp) {
«PROTECT CSTART '/*' CEND '*/' ID "cc"+transition.preCondition.id »
	//Proteced
«ENDPROTECT»			
}
«ENDIF»
«ENDIF»
«ENDIF»
«ENDFOREACH»
«ENDAROUND»

«AROUND de::uni_kassel::vs::cn::planDesigner::codegeneration::templates::ConstraintsCPlusPlus::planCheckingMethods FOR AbstractPlan»
	«FOREACH this.conditions.typeSelect(RuntimeCondition) AS rc»
	«IF (rc.pluginName == "DefaultPlugin")»
	«IF (rc.vars.size > 0) || (rc.quantifiers.size > 0)»
/*
* RuntimeCondition - (Name): «rc.name»
* (ConditionString): «rc.conditionString»
* Static Variables: «rc.vars.name»
* Domain Variables:
«FOREACH rc.quantifiers AS q»
* forall agents in «q.scope.name» let v = «q.sorts» 
«ENDFOREACH»
*/
void Constraint«rc.id»::getConstraint(shared_ptr<ConstraintDescriptor> c, shared_ptr<RunningPlan> rp) {
«PROTECT CSTART '/*' CEND '*/' ID "cc"+rc.id »
«ENDPROTECT»			    
}				
«ENDIF»
«ENDIF»
	«ENDFOREACH»
	«FOREACH this.conditions.typeSelect(PreCondition) AS pc»
	«IF (pc.pluginName == "DefaultPlugin")»
	«IF (pc.vars.size > 0) || (pc.quantifiers.size > 0)»
/*
* PreCondition - (Name): «pc.name»
* (ConditionString): «pc.conditionString»
* Static Variables: «pc.vars.name»
* Domain Variables:
«FOREACH pc.quantifiers AS q»
* forall agents in «q.scope.name» let v = «q.sorts» 
«ENDFOREACH»
*/
void Constraint«pc.id»::getConstraint(shared_ptr<ConstraintDescriptor> c, shared_ptr<RunningPlan> rp) {
«PROTECT CSTART '/*' CEND '*/' ID "cc"+pc.id »
	//Proteced
«ENDPROTECT»	
}
	«ENDIF»
	«ENDIF»			
	«ENDFOREACH»
«ENDAROUND»

«AROUND de::uni_kassel::vs::cn::planDesigner::codegeneration::templates::GoalExpressionCPlusPlus::planCheckingMethods FOR AbstractPlan»

«FOREACH this.conditions.typeSelect(RuntimeCondition) AS rc»
	«IF (rc.pluginName == "DefaultPlugin")»
			  //Check of RuntimeCondition - (Name): «rc.name», (ConditionString): «rc.conditionString» 
			  /*
			  * Available Vars:«FOREACH rc.vars AS var»
			  *	- «var.name» («var.id»)«ENDFOREACH»
			  */
			  public static AbstractFormula Run«rc.id»(RunningPlan rp){
			  	return AntlrFormularBuilder.GetFormula("«rc.conditionString»", ConditionType.Term);
			  }		
	«ENDIF»		
	«ENDFOREACH»
	«FOREACH this.conditions.typeSelect(PreCondition) AS pc»
	«IF (pc.pluginName == "DefaultPlugin")»
			  //Check of PreCondition - (Name): «pc.name», (ConditionString): «pc.conditionString» 
			  /*
			  * Available Vars:«FOREACH pc.vars AS var»
			  *	- «var.name» («var.id»)«ENDFOREACH»
			  */
			  public AbstractFormula Pre«pc.id»(RunningPlan rp){
			  	return AntlrFormularBuilder.GetFormula("«pc.conditionString»", ConditionType.Term);
			  }			
	«ENDIF»			
	«ENDFOREACH»
	«FOREACH this.conditions.typeSelect(PostCondition) AS pc»
	«IF (pc.pluginName == "DefaultPlugin")»
			  //Check of PostCondition - (Name): «pc.name», (ConditionString): «pc.conditionString» 
			  /*
			  * Available Vars:«FOREACH pc.vars AS var»
			  *	- «var.name» («var.id»)«ENDFOREACH»
			  */
			  public AbstractFormula Post«pc.id»(RunningPlan rp){
			  	return AntlrFormularBuilder.GetFormula("«pc.conditionString»", ConditionType.Term);
			  }	
	«ENDIF»					
	«ENDFOREACH»
«ENDAROUND»

