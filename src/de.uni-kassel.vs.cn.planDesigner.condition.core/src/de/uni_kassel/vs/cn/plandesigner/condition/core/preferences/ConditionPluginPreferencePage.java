package de.uni_kassel.vs.cn.plandesigner.condition.core.preferences;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.jface.preference.PreferencePage;
import org.eclipse.jface.viewers.TreeNode;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.ModifyEvent;
import org.eclipse.swt.events.ModifyListener;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.DirectoryDialog;
import org.eclipse.swt.widgets.FileDialog;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Text;
import org.eclipse.ui.IWorkbench;
import org.eclipse.ui.IWorkbenchPreferencePage;

import de.uni_kassel.vs.cn.planDesigner.alica.Condition;
import de.uni_kassel.vs.cn.planDesigner.alica.Plan;
import de.uni_kassel.vs.cn.planDesigner.ui.util.UsageDialog;
import de.uni_kassel.vs.cn.plandesigner.condition.core.Activator;
import de.uni_kassel.vs.cn.plandesigner.condition.core.ConditionPluginLoader;
import de.uni_kassel.vs.cn.plandesigner.condition.core.IConditionPlugin;
import de.uni_kassel.vs.cn.plandesigner.condition.core.Util;

/**
 * Preference page of this bundle
 * 
 * @author philipp
 * 
 */
public class ConditionPluginPreferencePage extends PreferencePage implements IWorkbenchPreferencePage {

	/**
	 * Map to store the selected preferences values.
	 */
	private Map<String, String> preferenceValues;

	/**
	 * Textfield which holds the path value
	 */
	private Text folderPath;
	
	private Text templateInterfacePath;
	
	private Text pluginTemplatePath;


	/**
	 * Combo to choose the default plugin
	 */
	private Combo combo;

	/**
	 * Label for status resports beloning to the path of the plugin folder
	 */
	private Label statusLabel;

	public ConditionPluginPreferencePage() {
		preferenceValues = new HashMap<String, String>();
	}

	@Override
	public void init(IWorkbench workbench) {
		IPreferenceStore store = Activator.getDefault().getPreferenceStore();
		setPreferenceStore(store);

		// current preference values
		preferenceValues.put(PreferenceConstants.PREF_CONDITION_PLUGIN_PATH, store.getString(PreferenceConstants.PREF_CONDITION_PLUGIN_PATH));
		preferenceValues.put(PreferenceConstants.PREF_DEFAULT_CONDITION_PLUGIN, store.getString(PreferenceConstants.PREF_DEFAULT_CONDITION_PLUGIN));
		preferenceValues.put(PreferenceConstants.PREF_ENCODING, store.getString(PreferenceConstants.PREF_ENCODING));
		preferenceValues.put(PreferenceConstants.PREF_TEMPLATE_INTERFACE_PATH, store.getString(PreferenceConstants.PREF_TEMPLATE_INTERFACE_PATH));
		preferenceValues.put(PreferenceConstants.PREF_PLUGIN_TEMPLATE_PATH, store.getString(PreferenceConstants.PREF_PLUGIN_TEMPLATE_PATH));
	
	}

	@Override
	protected Control createContents(Composite parent) {
		// Create UI - Code generated by Google Windowbuilder
		Group container = new Group(parent, SWT.NONE);
		container.setLayout(new GridLayout(2, false));
		container.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));
		container.setText("Requiered settings");

		Label pathLabel = new Label(container, SWT.NONE);
		pathLabel.setText("Path to plugin folder:");
		new Label(container, SWT.NONE);

		folderPath = new Text(container, SWT.BORDER | SWT.READ_ONLY);
		folderPath.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));

		Button browseButton = new Button(container, SWT.NONE);
		browseButton.setText("Browse");
		Button pathButton = browseButton;
		

		Label defaultPluginLabel = new Label(container, SWT.NONE);
		defaultPluginLabel.setText("Default plugin:");
		new Label(container, SWT.NONE);

		combo = new Combo(container, SWT.NONE);
		combo.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		new Label(container, SWT.NONE);
		
		
		
		Label templateInterfaceLabel = new Label(container, SWT.NONE);
		templateInterfaceLabel.setText("Path to template interface:");
		new Label(container, SWT.NONE);		
		
		templateInterfacePath = new Text(container, SWT.BORDER | SWT.READ_ONLY);
		templateInterfacePath.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		
		browseButton = new Button(container, SWT.NONE);
		browseButton.setText("Browse");
		browseButton.addSelectionListener(new TemplatePathSelectionListener(templateInterfacePath, PreferenceConstants.PREF_TEMPLATE_INTERFACE_PATH));
		
		Label pluginTemplateLabel = new Label(container, SWT.NONE);
		pluginTemplateLabel.setText("Path to plugin template:");
		new Label(container, SWT.NONE);
		
		pluginTemplatePath = new Text(container, SWT.BORDER | SWT.READ_ONLY);
		pluginTemplatePath.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		
		browseButton = new Button(container, SWT.NONE);
		browseButton.setText("Browse");
		browseButton.addSelectionListener(new TemplatePathSelectionListener(pluginTemplatePath, PreferenceConstants.PREF_PLUGIN_TEMPLATE_PATH));

		statusLabel = new Label(container, SWT.NONE);
		statusLabel.setText("");
		statusLabel.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
		new Label(container, SWT.NONE);

		// Add listeners
		
		combo.addSelectionListener(new SelectDefaultPluginSelectionListener());
		pathButton.addSelectionListener(new ConditionPathSelectionListener(combo, folderPath));
		
		String defaultName = Activator.getDefault().getPreferenceStore().getString(PreferenceConstants.PREF_DEFAULT_CONDITION_PLUGIN);
		// defaultname kann hier wegen initalizern nicht null sein
		ConditionPluginLoader.getInstance().refreshConditionPlugins();
		IConditionPlugin defaultPlugin = ConditionPluginLoader.getInstance().getConditionPlugin(defaultName);
		if (defaultPlugin == null) {
			setValid(false);
			showStatusMessage("No Defaultplugin selected");
		}

		// if no conditionplugin is in folder instantly set to invalid (can
		// happen if all plugins where removed at downtime of plandesigner)
		if (ConditionPluginLoader.getInstance().getConditionPluginNames().isEmpty()) {
			setValid(false);
			showStatusMessage("No Condition Plugins in folder.");
		}

		initializeValues();
		return container;
	}

	private Text createTemplateWithLabel(Group container, String labelText, String preferenceKey) {
		Label tempLabel;
		Text tempText;
		tempLabel = new Label(container, SWT.NONE);
		tempLabel.setText(labelText);
		new Label(container, SWT.NONE);

		tempText = new Text(container, SWT.BORDER);
		tempText.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		tempText.addModifyListener(new ApplyValueListener(preferenceKey));
		new Label(container, SWT.NONE);
		return tempText;
	}

	/**
	 * Makes status label visibile and shows the message
	 */
	public void showStatusMessage(String message) {
		statusLabel.setVisible(true);
		statusLabel.setText(message);
		statusLabel.update();
		statusLabel.redraw();
	}

	/**
	 * Hides the status message
	 */
	public void hideStatusMessage() {
		statusLabel.setVisible(false);
		statusLabel.setText("");
		statusLabel.update();
		statusLabel.redraw();
	}

	/**
	 * Initilazies the UI Components with the current values
	 */
	private void initializeValues() {
		IPreferenceStore preferenceStore = Activator.getDefault().getPreferenceStore();
		folderPath.setText(preferenceStore.getString(PreferenceConstants.PREF_CONDITION_PLUGIN_PATH));		
		templateInterfacePath.setText(preferenceStore.getString(PreferenceConstants.PREF_TEMPLATE_INTERFACE_PATH));		
		pluginTemplatePath.setText(preferenceStore.getString(PreferenceConstants.PREF_PLUGIN_TEMPLATE_PATH));
		// current plugins in the pluginloader are the same plugins like in the
		// direcory of the path above
		initPluginCombo();
	}

	@Override
	protected void performDefaults() {
		super.performDefaults();
		initializeValues();
		initPluginCombo();
	}

	@Override
	public boolean performOk() {
		//to build the new template
		ConditionPluginLoader.getInstance().refreshConditionPlugins();
		return finish();
	}

	@Override
	protected void performApply() {
		finish();
	}

	private boolean finish() {
		// if (getControl().isFocusControl()) {
		// check which plugins are missing in the new plugin folder and
		// inform
		// user about it
		Map<Plan, List<String>> missingConditionPluginNames = getMissingConditionPluginNames();

		if (missingConditionPluginNames.size() > 0) {
			List<TreeNode> treeNodes = new ArrayList<TreeNode>();
			for (Plan plan : missingConditionPluginNames.keySet()) {
				TreeNode planNode = new TreeNode(plan);
				List<String> pluginNames = missingConditionPluginNames.get(plan);

				TreeNode[] missingPluginsNode = new TreeNode[pluginNames.size()];
				for (int i = 0; i < missingPluginsNode.length; ++i) {
					missingPluginsNode[i] = new TreeNode(pluginNames.get(i));
				}

				planNode.setChildren(missingPluginsNode);
				treeNodes.add(planNode);
			}

			UsageDialog dialog = new UsageDialog(getShell(), treeNodes, "Missing Plugins", "Some Condition Plugins are missing in the new pluginfolder.", MessageDialog.INFORMATION);
			int result = dialog.open();

			if (result == MessageDialog.CANCEL) {
				return false;
			}
		}
		// commit values
		IPreferenceStore preferenceStore = Activator.getDefault().getPreferenceStore();
		for (String key : preferenceValues.keySet()) {
			preferenceStore.putValue(key, preferenceValues.get(key));
		}

		ConditionPluginLoader.getInstance().setPluginPath(preferenceValues.get(PreferenceConstants.PREF_CONDITION_PLUGIN_PATH));
		ConditionPluginLoader.getInstance().refreshConditionPlugins();
		// }
		return true;
	}

	/**
	 * Initializes the combo ui element with plugin names of the current
	 * directory
	 */
	private void initPluginCombo() {
		Set<String> pluginNames = ConditionPluginLoader.getInstance().getConditionPluginNames();
		String defaultName = Activator.getDefault().getPreferenceStore().getString(PreferenceConstants.PREF_DEFAULT_CONDITION_PLUGIN);
		IConditionPlugin defaultPlugin = ConditionPluginLoader.getInstance().getConditionPlugin(defaultName);
		int count = -1;
		for (String pluginName : pluginNames) {
			combo.add(pluginName);
			++count;
			if (defaultPlugin != null && pluginName.equals(defaultPlugin.getName())) {
				combo.select(count);
			}
		}

		// //no defaultplugin found
		// if(defaultPlugin == null){
		// showStatusMessage("No Defaultplugin with name " + defaultName + " ");
		// }
	}

	/**
	 * Checks all {@link Condition} implementations to return which
	 * ConditionPlugins are not in the new plugin folder
	 * 
	 * @return
	 */
	private Map<Plan, List<String>> getMissingConditionPluginNames() {
		Map<Plan, List<Condition>> allConditions = Util.getAllConditions();
		Map<String, IConditionPlugin> newConditionPlugins = ConditionPluginLoader.getInstance().checkForConditionPlugins(preferenceValues.get(PreferenceConstants.PREF_CONDITION_PLUGIN_PATH));
		Map<Plan, List<String>> missingPluginNames = new HashMap<Plan, List<String>>();

		for (Plan plan : allConditions.keySet()) {
			List<Condition> conditions = allConditions.get(plan);
			List<String> pluginNames = new ArrayList<String>();
			// check if from condition used plugin is in the new pluginfolder
			for (Condition condition : conditions) {
				String neededPluginName = condition.getPluginName();
				if (neededPluginName != null && !"".equals(neededPluginName)) {
					if (!newConditionPlugins.keySet().contains(neededPluginName) && !pluginNames.contains(neededPluginName)) {
						// plugin is not available and not in the list of
						// missing plugins for the plan
						pluginNames.add(neededPluginName);
					}
				}
			}
			if (pluginNames.size() > 0) {
				missingPluginNames.put(plan, pluginNames);
			}
		}

		return missingPluginNames;
	}
	
	private class TemplatePathSelectionListener implements SelectionListener{
		private Text textField; 
		private String preferenceKey;
	
		public TemplatePathSelectionListener(Text textField, String preferenceKey){
			this.textField = textField;
			this.preferenceKey = preferenceKey;
		}

		@Override
		public void widgetSelected(SelectionEvent e) {
			FileDialog dialog = new FileDialog(getShell());
			String path = dialog.open();

			if (path == null) {
				return;
			}
			
			if(!path.endsWith("xpt")){
				setValid(false);
				showStatusMessage("Invalid Template file.");
			}else{
				setValid(true);
				showStatusMessage("");
				
			
			}
			
			
			preferenceValues.put(preferenceKey, path);			
			textField.setText(path);
			
			
		}

		@Override
		public void widgetDefaultSelected(SelectionEvent e) {
			//NOTHING TO DO
			
		}
		
	}

	/**
	 * Shows dialog to select path for condition plugin folder.
	 * 
	 * @author philipp
	 * 
	 */
	private class ConditionPathSelectionListener implements SelectionListener {
		private Combo combo;
		private Text textField;

		public ConditionPathSelectionListener(Combo combo, Text textField) {
			this.combo = combo;
			this.textField = textField;
		}

		@Override
		public void widgetSelected(SelectionEvent e) {
			// open combo to choose the path
			DirectoryDialog dialog = new DirectoryDialog(getShell());
			String path = dialog.open();

			if (path == null) {
				return;
			}

			preferenceValues.put(PreferenceConstants.PREF_CONDITION_PLUGIN_PATH, path);

			// set the path in the textfield
			textField.setText(path);

			if(combo != null && combo.getItemCount() > 0){
				combo.removeAll();
			}
			Set<String> pluginNames = ConditionPluginLoader.getInstance().checkForConditionPlugins(path).keySet();

			// if no plugins are in the folder set input as invalid
			if (pluginNames.isEmpty()) {
				setValid(false);
				showStatusMessage("No Condition Plugins in folder.");
			} else {
				setValid(true);
				hideStatusMessage();
			}

			for (String pluginName : pluginNames) {
				combo.add(pluginName);
			}

			// set first item as selected
			if (combo.getItemCount() > 0) {
				combo.select(0);
				// set this values as current default plugin
				preferenceValues.put(PreferenceConstants.PREF_DEFAULT_CONDITION_PLUGIN, combo.getItem(0));
			}
		}

		@Override
		public void widgetDefaultSelected(SelectionEvent e) {
			// NOTHING TO DO
		}
	}

	/**
	 * Listener for selecting the default condition plugin.
	 * 
	 * @author philipp
	 * 
	 */
	private class SelectDefaultPluginSelectionListener implements SelectionListener {

		@Override
		public void widgetSelected(SelectionEvent e) {
			// if invalid was set at start
			setValid(true);
			showStatusMessage("");

			String pluginName = combo.getItem(combo.getSelectionIndex());

			preferenceValues.put(PreferenceConstants.PREF_DEFAULT_CONDITION_PLUGIN, pluginName);
		}

		@Override
		public void widgetDefaultSelected(SelectionEvent e) {
			// NOTHING TO DO

		}
	}

	private class ApplyValueListener implements ModifyListener {
		String key;

		public ApplyValueListener(String key) {
			this.key = key;
		}

		@Override
		public void modifyText(ModifyEvent e) {
			Text source = (Text) e.getSource();
			preferenceValues.put(key, source.getText());

		}

	}

}
